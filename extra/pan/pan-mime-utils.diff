--- pan/usenet-utils/mime-utils.cc	2009-10-15 23:51:06.649332576 -0400
+++ pan/usenet-utils/mime-utils.cc	2009-10-15 21:58:40.590006580 -0400
@@ -424,7 +424,7 @@
       if (filter)
         g_object_unref (filter);
       if (filter_stream)
-	g_object_unref (filter_stream);
+        g_object_unref (filter_stream);
     }
   };
 
@@ -433,8 +433,9 @@
   TempPart* find_filename_part (temp_parts_t& parts, const char * filename)
   {
     if (filename && *filename) {
+      TempPart *part;
       foreach (temp_parts_t, parts, it) {
-        TempPart * part (*it);
+        part = *it;
         if (part->filename && !strcmp(filename,part->filename))
           return part;
       }
@@ -456,12 +457,12 @@
     if (!part->stream) {
       part->stream = g_mime_stream_mem_new ();
       if (part->type != ENC_PLAIN) {
-	part->filter_stream =
-	  g_mime_stream_filter_new (part->stream);
+        part->filter_stream =
+          g_mime_stream_filter_new (part->stream);
         part->filter = part->type == ENC_UU
-	  ? g_mime_filter_basic_new (GMIME_CONTENT_ENCODING_UUENCODE, FALSE)
-	  : g_mime_filter_yenc_new (FALSE);
-	g_mime_stream_filter_add (GMIME_STREAM_FILTER(part->filter_stream),
+          ? g_mime_filter_basic_new (GMIME_CONTENT_ENCODING_UUENCODE, FALSE)
+          : g_mime_filter_yenc_new (FALSE);
+        g_mime_stream_filter_add (GMIME_STREAM_FILTER(part->filter_stream),
                                   part->filter);
       }
     }
@@ -503,8 +504,8 @@
   
 	while ((line_len = stream_readln (istream, line, &linestart_pos)))
 	{
-		char * line_str = (char*) line->data;
-		char * pch = strchr (line_str, '\n');
+		line_str = (char*) line->data;
+		pch = strchr (line_str, '\n');
 		if (pch != NULL) {
 			pch[1] = '\0';
 			line_len = pch - line_str;
@@ -514,7 +515,7 @@
 		{
 			case ENC_PLAIN:
 			{
-                                const StringView line_pstr (line_str, line_len);
+        const StringView line_pstr (line_str, line_len);
 
 				if (uu_is_beginning_line (line_pstr))
 				{
@@ -593,7 +594,6 @@
 				else if (cur == NULL)
 				{
 					sub_begin = linestart_pos;
-
 					cur = new TempPart (type = ENC_PLAIN);
 				}
 				break;
@@ -620,9 +620,8 @@
 					if (sub_begin >= 0)
 					{
 						GMimeStream * stream = g_mime_stream_substream (istream, sub_begin, linestart_pos);
-  						apply_source_and_maybe_filter (cur, stream);
+            apply_source_and_maybe_filter (cur, stream);
 					}
-
 					sub_begin = -1;
 				}
 				else if (sub_begin == -1)
@@ -642,7 +641,7 @@
 				if (yenc_is_ending_line (line_str))
 				{
 					GMimeStream * stream = g_mime_stream_substream (istream, sub_begin, linestart_pos+line_len);
-  					apply_source_and_maybe_filter (cur, stream);
+          apply_source_and_maybe_filter (cur, stream);
 					yenc_parse_end_line (line_str, &cur->y_size, NULL, &cur->y_pcrc, &cur->y_crc);
 					if( append_if_not_present (master, cur) )
             append_if_not_present (appendme, cur);
@@ -671,7 +670,7 @@
 		if (sub_begin >= 0)
 		{
 			GMimeStream * stream = g_mime_stream_substream (istream, sub_begin, linestart_pos);
-  			apply_source_and_maybe_filter (cur, stream);
+      apply_source_and_maybe_filter (cur, stream);
 		}
 
 		/* just in case someone started with "yenc" or "begin 644 asf" in a text message to fuck with unwary newsreaders */
@@ -702,6 +701,7 @@
 	} suffixes[] = {
 		{ ".avi",   "video",        "vnd.msvideo" },
 		{ ".dtd",   "text",         "xml-dtd" },
+		{ ".flac",  "audio",        "ogg" },
 		{ ".gif",   "image",        "gif" },
 		{ ".htm",   "text",         "html" },
 		{ ".html",  "text",         "html" },
@@ -713,11 +713,17 @@
 		{ ".mpg",   "video",        "mpeg" },
 		{ ".mov",   "video",        "quicktime" },
 		{ ".nfo",   "text",         "plain" },
-		{ ".ogg",   "audio",        "x-vorbis" },
+		{ ".oga",   "audio",        "x-vorbis" },
+		{ ".ogg",   "audio",        "ogg" },
+		{ ".ogv",   "video",        "ogg" },
+		{ ".ogx",   "application",  "ogg" },
 		{ ".png",   "image",        "png" },
 		{ ".qt",    "video",        "quicktime" },
 		{ ".rar",   "application",  "x-rar" },
 		{ ".rv",    "video",        "vnd.rn-realvideo" },
+		{ ".scr",   "application",  "octet-stream" },
+		{ ".spx",   "audio",        "ogg" },
+		{ ".svg",   "image",        "svg+xml" },
 		{ ".tar",   "application",  "x-tar" },
 		{ ".tbz2",  "application",  "x-tar" },
 		{ ".tgz",   "application",  "x-tar" },
@@ -741,7 +747,7 @@
 	/* sanity clause */
 	pan_return_if_fail (is_nonempty_string(filename));
 
-       	suffix = strrchr (filename, '.');
+  suffix = strrchr (filename, '.');
 	if (suffix != NULL) {
 		int i;
 		for (i=0; i<suffix_qty; ++i) {
@@ -754,8 +760,8 @@
 	}
 
 	if (*setme_type == NULL) {
-		*setme_type = "text";
-		*setme_subtype = "plain";
+		*setme_type = "application";
+		*setme_subtype = "octet-stream";
 	}
 }
 
@@ -783,30 +789,16 @@
   
   void handle_uu_and_yenc_in_text_plain_cb (GMimeObject *parent, GMimeObject *part, gpointer data)
   {
-    // if the part is a multipart, check its subparts
-    if (GMIME_IS_MULTIPART (*part)) {
-      GMimeMultipart *multipart = (GMimeMultipart *) *part;
-      int count = g_mime_multipart_get_count(multipart);
-      int i;
-      for (i = 0; i < count; i++) {
-        GMimeObject * subpart = g_mime_multipart_remove_at (multipart, i);
-        //work around possible gmime bug
-        if(!subpart)
-          continue;
-        handle_uu_and_yenc_in_text_plain (&subpart);
-        g_mime_multipart_insert (multipart, i, subpart);
-        g_object_unref (subpart);
-      }
+    if(!part)
       return;
-    }
-
+    
     // we assume that inlined yenc and uu are only in text/plain blocks
-    GMimeContentType * content_type = g_mime_object_get_content_type (*part);
+    GMimeContentType * content_type = g_mime_object_get_content_type (part);
     if (!g_mime_content_type_is_type (content_type, "text", "plain"))
       return;
 
     // get this part's content
-    GMimeDataWrapper * content = g_mime_part_get_content_object (GMIME_PART (*part));
+    GMimeDataWrapper * content = g_mime_part_get_content_object (GMIME_PART (part));
     if (!content)
       return;
 
@@ -1145,66 +1137,66 @@
 GMimeObject *
 handle_multipart_alternative (GMimeMultipart *multipart, gboolean *is_html)
 {
-        GMimeObject *mime_part, *text_part = NULL;
-        GMimeContentType *type;
-        int count = g_mime_multipart_get_count (multipart);
-
-        for (int i = 0; i < count; ++i) {
-                mime_part = g_mime_multipart_get_part (multipart, i);
-
-                type = g_mime_object_get_content_type (mime_part);
-                if (g_mime_content_type_is_type (type, "text", "*")) {
-                        if (!text_part || !g_ascii_strcasecmp (type->subtype, "plain")) {
-                                *is_html = !g_ascii_strcasecmp (type->subtype, "html");
-                                text_part = mime_part;
-                        }
-                }
-        }
+  GMimeObject *mime_part, *text_part = NULL;
+  GMimeContentType *type;
+  int count = g_mime_multipart_get_count (multipart);
+
+  for (int i = 0; i < count; ++i) {
+    mime_part = g_mime_multipart_get_part (multipart, i);
+
+    type = g_mime_object_get_content_type (mime_part);
+    if (g_mime_content_type_is_type (type, "text", "*")) {
+      if (!text_part || !g_ascii_strcasecmp (type->subtype, "plain")) {
+        *is_html = !g_ascii_strcasecmp (type->subtype, "html");
+        text_part = mime_part;
+      }
+    }
+  }
 
-        return text_part;
+  return text_part;
 }
 
 GMimeObject *
 handle_multipart_mixed (GMimeMultipart *multipart, gboolean *is_html)
 {
-        GMimeObject *mime_part, *text_part = NULL;
-        GMimeContentType *type, *first_type = NULL;
-        int count = g_mime_multipart_get_count (multipart);
-
-        for (int i = 0; i < count; ++i) {
-                mime_part = g_mime_multipart_get_part (multipart, i);
-
-                type = g_mime_object_get_content_type (mime_part);
-                if (GMIME_IS_MULTIPART (mime_part)) {
-                        multipart = GMIME_MULTIPART (mime_part);
-                        if (g_mime_content_type_is_type (type, "multipart", "alternative")) {
-                                mime_part = handle_multipart_alternative (multipart, is_html);
-                                if (mime_part)
-                                        return mime_part;
-                        } else {
-                                mime_part = handle_multipart_mixed (multipart, is_html);
-                                if (mime_part && !text_part)
-                                        text_part = mime_part;
-                        }
-                } else if (g_mime_content_type_is_type (type, "text", "*")) {
-                        if (!g_ascii_strcasecmp (type->subtype, "plain")) {
-                                /* we got what we came for */
-                                *is_html = !g_ascii_strcasecmp (type->subtype, "html");
-                                return mime_part;
-                        }
-
-                        /* if we haven't yet found a text part or if it is a type we can
- *                          * understand and it is the first of that type, save it */
-                        if (!text_part || (!g_ascii_strcasecmp (type->subtype, "plain") && (first_type &&
-                                           g_ascii_strcasecmp (type->subtype, first_type->subtype) != 0))) {
-                                *is_html = !g_ascii_strcasecmp (type->subtype, "html");
-                                text_part = mime_part;
-                                first_type = type;
-                        }
-                }
-        }
+  GMimeObject *mime_part, *text_part = NULL;
+  GMimeContentType *type, *first_type = NULL;
+  int count = g_mime_multipart_get_count (multipart);
+
+  for (int i = 0; i < count; ++i) {
+    mime_part = g_mime_multipart_get_part (multipart, i);
+
+    type = g_mime_object_get_content_type (mime_part);
+    if (GMIME_IS_MULTIPART (mime_part)) {
+      multipart = GMIME_MULTIPART (mime_part);
+      if (g_mime_content_type_is_type (type, "multipart", "alternative")) {
+        mime_part = handle_multipart_alternative (multipart, is_html);
+        if (mime_part)
+          return mime_part;
+      } else {
+        mime_part = handle_multipart_mixed (multipart, is_html);
+        if (mime_part && !text_part)
+          text_part = mime_part;
+      }
+    } else if (g_mime_content_type_is_type (type, "text", "*")) {
+      if (!g_ascii_strcasecmp (type->subtype, "plain")) {
+        /* we got what we came for */
+        *is_html = !g_ascii_strcasecmp (type->subtype, "html");
+        return mime_part;
+      }
+
+      /* if we haven't yet found a text part or if it is a type we can
+*                          * understand and it is the first of that type, save it */
+      if (!text_part || (!g_ascii_strcasecmp (type->subtype, "plain") && (first_type &&
+           g_ascii_strcasecmp (type->subtype, first_type->subtype) != 0))) {
+        *is_html = !g_ascii_strcasecmp (type->subtype, "html");
+        text_part = mime_part;
+        first_type = type;
+      }
+    }
+  }
 
-        return text_part;
+  return text_part;
 }
 
 }
@@ -1217,74 +1209,75 @@
 char *
 pan_g_mime_part_get_content (const GMimePart *mime_part, size_t *len)
 {
-        char *retval = NULL;
+  char *retval = NULL;
 
-        g_return_val_if_fail (GMIME_IS_PART (mime_part), NULL);
+  g_return_val_if_fail (GMIME_IS_PART (mime_part), NULL);
 
-        if (!mime_part->content || !mime_part->content->stream) {
-                g_warning ("no content set on this mime part");
-                return NULL;
-        }
+  if (!mime_part->content || !mime_part->content->stream) {
+    g_warning ("no content set on this mime part");
+    return NULL;
+  }
 
-        GMimeDataWrapper *wrapper = g_mime_part_get_content_object(mime_part);
-        GMimeStream *stream = g_mime_stream_mem_new();
-        g_mime_data_wrapper_write_to_stream (wrapper, stream);
-        GByteArray *bytes=g_mime_stream_mem_get_byte_array((GMimeStreamMem*)stream);
-        *len=bytes->len+1;
-        if (bytes->len)
-        {
-          retval=(char*)g_malloc0(bytes->len+1);
-          memcpy(retval,bytes->data,bytes->len);
-        }
-        g_object_unref(stream);
+  GMimeDataWrapper *wrapper = g_mime_part_get_content_object(mime_part);
+  GMimeStream *stream = g_mime_stream_mem_new();
+  g_mime_data_wrapper_write_to_stream (wrapper, stream);
+  GByteArray *bytes=g_mime_stream_mem_get_byte_array((GMimeStreamMem*)stream);
+  *len=bytes->len+1;
+  if (bytes->len)
+  {
+    retval=(char*)g_malloc0(bytes->len+1);
+    memcpy(retval,bytes->data,bytes->len);
+  }
+  g_object_unref(stream);
 
-        return retval;
+  return retval;
 }
 }
 
 char *pan::pan_g_mime_message_get_body (GMimeMessage *message, gboolean *is_html)
 {
-        GMimeObject *mime_part = NULL;
-        GMimeContentType *type;
-        GMimeMultipart *multipart;
-        char *body = NULL;
-        size_t len = 0;
-
-        g_return_val_if_fail (GMIME_IS_MESSAGE (message), NULL);
-        g_return_val_if_fail (is_html != NULL, NULL);
-
-        type = g_mime_object_get_content_type (message->mime_part);
-        if (GMIME_IS_MULTIPART (message->mime_part)) {
-                /* let's see if we can find a body in the multipart */
-                multipart = GMIME_MULTIPART (message->mime_part);
-                if (g_mime_content_type_is_type (type, "multipart", "alternative"))
-                        mime_part = handle_multipart_alternative (multipart, is_html);
-                else
-                        mime_part = handle_multipart_mixed (multipart, is_html);
-        } else if (g_mime_content_type_is_type (type, "text", "*")) {
-                /* this *has* to be the message body */
-                if (g_mime_content_type_is_type (type, "text", "html"))
-                        *is_html = TRUE;
-                else
-                        *is_html = FALSE;
-                mime_part = message->mime_part;
-        }
+  GMimeObject *mime_part = NULL;
+  GMimeContentType *type;
+  GMimeMultipart *multipart;
+  char *body = NULL;
+  size_t len = 0;
+
+  g_return_val_if_fail (GMIME_IS_MESSAGE (message), NULL);
+  g_return_val_if_fail (is_html != NULL, NULL);
+
+  type = g_mime_object_get_content_type (message->mime_part);
+  if (GMIME_IS_MULTIPART (message->mime_part)) {
+    /* let's see if we can find a body in the multipart */
+    multipart = GMIME_MULTIPART (message->mime_part);
+    if (g_mime_content_type_is_type (type, "multipart", "alternative"))
+      mime_part = handle_multipart_alternative (multipart, is_html);
+    else
+      mime_part = handle_multipart_mixed (multipart, is_html);
+  } else if (g_mime_content_type_is_type (type, "text", "*")) {
+    /* this *has* to be the message body */
+    if (g_mime_content_type_is_type (type, "text", "html"))
+      *is_html = TRUE;
+    else
+      *is_html = FALSE;
+    mime_part = message->mime_part;
+  }
 
-        if (mime_part != NULL) {
-                body = pan_g_mime_part_get_content (GMIME_PART (mime_part), &len);
-        }
+  if (mime_part != NULL) {
+    body = pan_g_mime_part_get_content (GMIME_PART (mime_part), &len);
+  }
 
-        return body;
+  return body;
 }
 
 void pan::pan_g_mime_message_add_recipients_from_string (GMimeMessage *message, GMimeRecipientType type, const char *string)
 {
-        InternetAddressList *addrlist;
-        if ((addrlist = internet_address_list_parse_string (string))) {
-        	for (int i = 0; i < internet_address_list_length (addrlist); ++i) {
-                	InternetAddress *ia = internet_address_list_get_address (addrlist, i);
-                	if (INTERNET_ADDRESS_IS_MAILBOX(ia))
-				g_mime_message_add_recipient (message, type, internet_address_get_name(ia), internet_address_mailbox_get_addr(INTERNET_ADDRESS_MAILBOX(ia)));
-		}
-        }
+  InternetAddressList *addrlist;
+  if ((addrlist = internet_address_list_parse_string (string))) {
+    InternetAddress *ia;
+    for (int i = 0; i < internet_address_list_length (addrlist); ++i) {
+      ia = internet_address_list_get_address (addrlist, i);
+      if (INTERNET_ADDRESS_IS_MAILBOX(ia))
+        g_mime_message_add_recipient (message, type, internet_address_get_name(ia), internet_address_mailbox_get_addr(INTERNET_ADDRESS_MAILBOX(ia)));
+    }
+  }
 }
