--- fcpcmcia_cs.c~	2010-02-27 14:28:58.000000000 +0100
+++ fcpcmcia_cs.c	2010-02-27 14:28:58.000000000 +0100
@@ -186,8 +186,6 @@
 	for (i = 0; (i < irq_list_count) && (default_irq_list[i] > 0); i++)
 	    p_dev->irq.IRQInfo2 |= 1 << default_irq_list[i];
     }
-#else
-    p_dev->irq.IRQInfo1 = IRQ_LEVEL_ID;
 #endif
     
     /* General socket configuration */
--- fcpcmcia_cs.c~	2010-02-27 14:42:09.000000000 +0100
+++ fcpcmcia_cs.c	2010-02-27 14:40:10.000000000 +0100
@@ -175,7 +175,7 @@
     p_dev->io.NumPorts2 = 0;
 
     /* Interrupt setup */
-    p_dev->irq.Attributes = IRQ_TYPE_DYNAMIC_SHARING|IRQ_FIRST_SHARED;
+    p_dev->irq.Attributes = IRQ_TYPE_DYNAMIC_SHARING;
 
 #if defined (PCMCIA_IRQ_INFO2)
     p_dev->irq.IRQInfo1 = IRQ_INFO2_VALID|IRQ_LEVEL_ID;
@@ -325,7 +325,6 @@
 
 found_port:
 	if (i != 0) {
-	    cs_error(link, RequestIO, i);
 	    break;
 	}
 	
@@ -334,7 +333,6 @@
 	 */
 	i = pcmcia_request_irq(link, &link->irq);
 	if (i != 0) {
-	    cs_error(link, RequestIRQ, i);
             /* undo */
             pcmcia_disable_device(link);
 	    break;
@@ -345,7 +343,6 @@
 	  */
 	i = pcmcia_request_configuration(link, &link->conf);
 	if (i != 0) {
-	    cs_error(link, RequestConfiguration, i);
             pcmcia_disable_device(link);
 	    break;
 	}
--- fcpcmcia_cs.c~	2010-02-27 18:21:14.000000000 +0100
+++ fcpcmcia_cs.c	2010-02-27 18:21:14.000000000 +0100
@@ -195,10 +195,9 @@
     p_dev->conf.Present = PRESENT_OPTION;
 
     /* Allocate space for private device-specific data */
-    local = kmalloc(sizeof(local_info_t), GFP_KERNEL);
+    local = kzalloc(sizeof(local_info_t), GFP_KERNEL);
     if (!local)
         goto err_kfree;
-    memset(local, 0, sizeof(local_info_t));
     p_dev->priv = local;
     return cs_config(p_dev);
 
@@ -230,104 +229,39 @@
     
 ======================================================================*/
 
-static int get_tuple(struct pcmcia_device *handle, tuple_t *tuple,
-                      cisparse_t *parse)
+static int cs_configcheck(struct pcmcia_device *p_dev,
+                              cistpl_cftable_entry_t *cf,
+                              cistpl_cftable_entry_t *dflt,
+                              unsigned int vcc,
+                              void *priv_data)
 {
-    int i = pcmcia_get_tuple_data(handle, tuple);
-    if (i != 0) return i;
-    return pcmcia_parse_tuple(tuple, parse);
-}
+       if (cf->io.nwin <= 0)
+               return -ENODEV;
 
-static int first_tuple(struct pcmcia_device *handle, tuple_t *tuple,
-		     cisparse_t *parse)
-{
-    int i = pcmcia_get_first_tuple(handle, tuple);
-    if (i != 0) return i;
-    return get_tuple(handle, tuple, parse);
-}
-
-static int next_tuple(struct pcmcia_device *handle, tuple_t *tuple,
-		     cisparse_t *parse)
-{
-    int i = pcmcia_get_next_tuple(handle, tuple);
-    if (i != 0) return i;
-    return get_tuple(handle, tuple, parse);
-}
+       p_dev->io.BasePort1 = cf->io.win[0].base;
+       p_dev->io.NumPorts1 = cf->io.win[0].len;
+       p_dev->io.NumPorts2 = 0;
+       printk(KERN_INFO "fcpcmcia_cs: testing i/o %#x-%#x\n",
+              p_dev->io.BasePort1,
+              p_dev->io.BasePort1+p_dev->io.NumPorts1-1);
+       return pcmcia_request_io(p_dev, &p_dev->io);
+ }
 
 static int cs_config(struct pcmcia_device *link)
 {
-    tuple_t tuple;
-    cisparse_t parse;
-    cistpl_cftable_entry_t *cf = &parse.cftable_entry;
     local_info_t *dev;
     int i;
-    u_char buf[64];
     char devname[128];
     dev = link->priv;
 
-    /*
-       This reads the card's CONFIG tuple to find its configuration
-       registers.
-    */
-    do {
-	tuple.DesiredTuple = CISTPL_CONFIG;
-	i = pcmcia_get_first_tuple(link, &tuple);
-	if (i != 0) break;
-	tuple.TupleData = buf;
-	tuple.TupleDataMax = 64;
-	tuple.TupleOffset = 0;
-	i = pcmcia_get_tuple_data(link, &tuple);
-	if (i != 0) break;
-	i = pcmcia_parse_tuple(&tuple, &parse);
-	if (i != 0) break;
-	link->conf.ConfigBase = parse.config.base;
-    } while (0);
-    if (i != 0) {
-	cs_error(link, ParseTuple, i);
-        return -ENODEV;
-    }
-
-    do {
-
-	tuple.Attributes = 0;
-	tuple.TupleData = buf;
-	tuple.TupleDataMax = 254;
-	tuple.TupleOffset = 0;
-	tuple.DesiredTuple = CISTPL_VERS_1;
-
-	devname[0] = 0;
-	if( !first_tuple(link, &tuple, &parse) && parse.version_1.ns > 1 ) {
-	    strlcpy(devname,parse.version_1.str + parse.version_1.ofs[1], 
-			sizeof(devname));
-	}
-	/*
-         * find IO port
-         */
-	tuple.TupleData = (cisdata_t *)buf;
-	tuple.TupleOffset = 0; tuple.TupleDataMax = 255;
-	tuple.Attributes = 0;
-	tuple.DesiredTuple = CISTPL_CFTABLE_ENTRY;
-	i = first_tuple(link, &tuple, &parse);
-	while (i == 0) {
-	    if (cf->io.nwin > 0) {
-		link->conf.ConfigIndex = cf->index;
-		link->io.BasePort1 = cf->io.win[0].base;
-		link->io.NumPorts1 = cf->io.win[0].len;
-		link->io.NumPorts2 = 0;
-                NOTE("testing i/o %#x-%#x\n",
-			link->io.BasePort1,
-		        link->io.BasePort1+link->io.NumPorts1-1);
-		i = pcmcia_request_io(link, &link->io);
-		if (i == 0) goto found_port;
-	    }
-	    i = next_tuple(link, &tuple, &parse);
-	}
-
-found_port:
-	if (i != 0) {
-	    break;
-	}
-	
+    devname[0] = 0;
+    if (link->prod_id[1])
+           strlcpy(devname, link->prod_id[1], sizeof(devname));
+
+    if (pcmcia_loop_config(link, cs_configcheck, NULL))
+           return -ENODEV;
+
+     do {
 	/*
 	 * allocate an interrupt line
 	 */
